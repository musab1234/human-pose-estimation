// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pose.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace  {
  public static class HumanPose
  {
    static readonly string __ServiceName = "HumanPose";

    static readonly Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_Empty = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Protobuf.WellKnownTypes.Empty.Parser.ParseFrom);
    static readonly Marshaller<global::Humans> __Marshaller_Humans = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Humans.Parser.ParseFrom);

    static readonly Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Humans> __Method_GetHumans = new Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Humans>(
        MethodType.Unary,
        __ServiceName,
        "GetHumans",
        __Marshaller_Empty,
        __Marshaller_Humans);

    // service descriptor
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Pose.Descriptor.Services[0]; }
    }

    // client interface
    public interface IHumanPoseClient
    {
      global::Humans GetHumans(global::Google.Protobuf.WellKnownTypes.Empty request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::Humans GetHumans(global::Google.Protobuf.WellKnownTypes.Empty request, CallOptions options);
      AsyncUnaryCall<global::Humans> GetHumansAsync(global::Google.Protobuf.WellKnownTypes.Empty request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::Humans> GetHumansAsync(global::Google.Protobuf.WellKnownTypes.Empty request, CallOptions options);
    }

    // server-side interface
    public interface IHumanPose
    {
      Task<global::Humans> GetHumans(global::Google.Protobuf.WellKnownTypes.Empty request, ServerCallContext context);
    }

    // client stub
    public class HumanPoseClient : ClientBase, IHumanPoseClient
    {
      public HumanPoseClient(Channel channel) : base(channel)
      {
      }
      public global::Humans GetHumans(global::Google.Protobuf.WellKnownTypes.Empty request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_GetHumans, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::Humans GetHumans(global::Google.Protobuf.WellKnownTypes.Empty request, CallOptions options)
      {
        var call = CreateCall(__Method_GetHumans, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Humans> GetHumansAsync(global::Google.Protobuf.WellKnownTypes.Empty request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_GetHumans, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Humans> GetHumansAsync(global::Google.Protobuf.WellKnownTypes.Empty request, CallOptions options)
      {
        var call = CreateCall(__Method_GetHumans, options);
        return Calls.AsyncUnaryCall(call, request);
      }
    }

    // creates service definition that can be registered with a server
    public static ServerServiceDefinition BindService(IHumanPose serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder(__ServiceName)
          .AddMethod(__Method_GetHumans, serviceImpl.GetHumans).Build();
    }

    // creates a new client
    public static HumanPoseClient NewClient(Channel channel)
    {
      return new HumanPoseClient(channel);
    }

  }
}
#endregion
